import React, { useState } from 'react';
import { Button, Box, Typography, Paper, TextField, Grid, Alert, CircularProgress } from '@mui/material';
import axios from 'axios';

const API_URL = import.meta.env.VITE_API_URL || "http://localhost:5001";

const EsewaDirectTestForm = () => {
  const [formData, setFormData] = useState({
    amount: '100',
    total_amount: '100',
    transaction_uuid: `TX${Date.now()}`,
    product_code: 'EPAYTEST',
    product_service_charge: '0',
    product_delivery_charge: '0',
    tax_amount: '0',
    success_url: `${API_URL}/api/payments/esewa/success`,
    failure_url: `${API_URL}/api/payments/esewa/failure`,
    signed_field_names: 'total_amount,transaction_uuid,product_code',
    signature: '' // Will be generated by backend
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [message, setMessage] = useState('');

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const generateSignature = async () => {
    try {
      setLoading(true);
      setError('');
      setMessage('');
      
      const response = await axios.post(`${API_URL}/api/payments/esewa/test-signature`, {
        total_amount: formData.total_amount,
        transaction_uuid: formData.transaction_uuid,
        product_code: formData.product_code
      });
      
      if (response.data.success) {
        // Update all fields with the response data
        setFormData(prev => ({
          ...prev,
          ...response.data.fullData
        }));
        setMessage('Signature generated successfully!');
      } else {
        setError('Failed to generate signature');
      }
    } catch (err) {
      setError(err.response?.data?.message || 'Error generating signature');
      console.error('Error generating signature:', err);
    } finally {
      setLoading(false);
    }
  };

  const resetTransactionId = () => {
    const newTxId = `TX${Date.now()}`;
    setFormData(prev => ({ 
      ...prev, 
      transaction_uuid: newTxId,
      signature: '' // Clear signature as it would be invalid with new txId
    }));
    setMessage(`Transaction ID reset to ${newTxId}`);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (!formData.signature) {
      setError('Please generate a signature first');
      return;
    }
    
    // Submit the form programmatically
    document.getElementById('directTestForm').submit();
    setMessage('Form submitted!');
  };

  return (
    <Paper sx={{ p: 3, maxWidth: 800, mx: 'auto', my: 3 }}>
      <Typography variant="h5" gutterBottom>
        eSewa Direct Test Form
      </Typography>
      
      {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}
      {message && <Alert severity="success" sx={{ mb: 2 }}>{message}</Alert>}
      
      <Box sx={{ my: 2 }}>
        <Button 
          variant="outlined" 
          size="small" 
          onClick={resetTransactionId}
          sx={{ mr: 1 }}
          disabled={loading}
        >
          Reset Transaction ID
        </Button>
        <Button 
          variant="contained" 
          size="small" 
          onClick={generateSignature}
          disabled={loading}
          color="primary"
        >
          {loading ? <CircularProgress size={20} /> : 'Generate Signature'}
        </Button>
      </Box>
      
      <form 
        id="directTestForm"
        action="https://rc-epay.esewa.com.np/api/epay/main/v2/form"
        method="POST"
        encType="application/x-www-form-urlencoded"
        target="_blank"
      >
        <Grid container spacing={2}>
          {Object.entries(formData).map(([key, value]) => (
            <Grid item xs={12} sm={6} key={key}>
              <TextField
                fullWidth
                label={key}
                name={key}
                value={value}
                onChange={handleChange}
                size="small"
                variant="outlined"
                disabled={key === 'signature'} // Signature should only be generated, not edited
              />
            </Grid>
          ))}
          
          <Grid item xs={12} sx={{ mt: 2 }}>
            <Button 
              variant="contained" 
              color="success" 
              onClick={handleSubmit}
              fullWidth
              disabled={loading || !formData.signature}
              sx={{ py: 1 }}
            >
              Submit Test Form
            </Button>
          </Grid>
        </Grid>
      </form>
      
      <Box sx={{ mt: 3, p: 2, bgcolor: '#f5f5f5', borderRadius: 1 }}>
        <Typography variant="subtitle2" gutterBottom>Test Instructions:</Typography>
        <Typography variant="body2">
          1. Make sure all fields are correctly filled (especially total_amount, transaction_uuid, and product_code)
        </Typography>
        <Typography variant="body2">
          2. Click "Generate Signature" to create a valid signature through the backend API
        </Typography>
        <Typography variant="body2">
          3. Submit the form to test the payment flow
        </Typography>
        
        <Typography variant="subtitle2" sx={{ mt: 2 }}>Test Credentials:</Typography>
        <Typography variant="body2">eSewa ID: 9806800001</Typography>
        <Typography variant="body2">Password: Nepal@123</Typography>
        <Typography variant="body2">MPIN: 1122</Typography>
        <Typography variant="body2">Token: 123456</Typography>
      </Box>
    </Paper>
  );
};

export default EsewaDirectTestForm; 